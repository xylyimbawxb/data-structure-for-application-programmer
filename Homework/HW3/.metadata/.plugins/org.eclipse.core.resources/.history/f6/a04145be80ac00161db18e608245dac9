/**
 * 08722 Homework 3.
 * @author Xin Wang
 * Andrew ID: xinw3
 */
public class SortedLinkedList implements MyListInterface {
    /**
     * Head node of the LinkedList.
     */
    private Node head;
    /**
     * Inner class to define Node.
     */
    public static class Node {
        /**
         * String value of the Node.
         */
        private String data;
        /**
         * Refer to the next Node.
         */
        private Node next;
        /**
         * Constructor.
         * @param s String value of the Node.
         * @param n Node refers to the next Node.
         */
        public Node(String s, Node n) {
            data = s;
            next = n;
        }
    }
    /**
     * No-arg Constructor.
     */
    public SortedLinkedList() {
        this(null);
    }
    /**
     * Constructor with argument.
     * @param unsortedArray String array to be sorted.
     */
    public SortedLinkedList(String[] unsortedArray) {
        if (unsortedArray != null) {
            sortedLinkedList(unsortedArray, unsortedArray.length - 1);
        }
    }
    /**
     * Inserts a new String.
     * No duplicates allowed and maintain the order in ascending order.
     * @param value String to be added.
     */
    @Override
    public void add(String value) {
        head = add(head, value);
    }
    /**
     * Checks the size (number of data items) of the list.
     * @return the size of the list
     */
    @Override
    public int size() {
        return size(head);
    }
    /**
     * Displays the values of the list.
     */
    @Override
    public void display() {
        display(head);
    }
    /**
     * Returns true if the key value is in the list.
     * @param key String key to search
     * @return true if found, false if not found
     */
    @Override
    public boolean contains(String key) {
        return contains(head, key);
    }
    /**
     * Returns true is the list is empty.
     * @return true if it is empty, false if it is not empty
     */
    @Override
    public boolean isEmpty() {
        return head == null;
    }
    /**
     * Removes and returns the first String object of the list.
     * @return String object that is removed
     */
    @Override
    public String removeFirst() {
        Node oldHead = head;
        head = head.next;
        return oldHead.data.trim();
    }
    /**
     * Removes and returns String object at the specified index.
     * @param index index to remove String object
     * @return String object that is removed
     */
    @Override
    public String removeAt(int index) {
        if (index < 0 || head == null || index > this.size() - 1) {
            return null;
        } else if (index == 0) {
            return removeFirst().trim();
        } else {
            return removeAt(head, index).trim();
        }
    }

    /****************************
     * My own helper function.
     ****************************/
    /**
     * Helper function of Constructor.
     * @param us unsortedArray
     * @param index the index of the array to be added to the LinkedList.
     */
    private void sortedLinkedList(String[] us, int index) {
        if (index < 0 || us == null) {
            return;
        } else if (us[index] != null && !us[index].trim().isEmpty()){
            add(us[index].trim());
            sortedLinkedList(us, index - 1);
        }
    }
    /**
     * Helper function of size.
     * @param n the head node used to calculate the size of the array.
     * @return int size of the LinkedList.
     */
    private static int size(Node n) {
        if (n == null) {
            return 0;
        }
        return 1 + size(n.next);
    }
    /**
     * Helper function to display the LinkedList.
     * @param n the head node passed as the parameter.
     */
    private void display(Node n) {
        if (n == null) {
            System.out.println("]");
            return;
        }
        if (n == head) {
            System.out.print("[");
        }
        System.out.print(n.data);
        if (n.next != null) {
            System.out.print(", ");
        }
        display(n.next);
    }
    /**
     * Helper function to add new node into the LinkedList.
     * @param n the head node of the LinkedList.
     * @param s the value to be added.
     * @return Node head node.
     */
    private Node add(Node n, String s) {
        if (s != null && !s.trim().isEmpty()) {
            if (n == null || s.compareTo(n.data) < 0) {
                return new Node(s.trim(), n);
            } else if (s.compareTo(n.data) == 0) {
                return n;
            } else {
                n.next = add(n.next, s.trim());
                return n;
            }
        }
        return n;
    }
    /**
     * Helper function of contains method.
     * @param n head node of the LinkedList.
     * @param s the String value used.
     * @return boolean type.
     */
    private static boolean contains(Node n, String s) {
        if (s != null && !s.trim().isEmpty()) {
            if (n == null) {
                return false;
            }
            if (n.data.equals(s)) {
                return true;
            }
            return contains(n.next, s);
        }
        return false;
    }
    /**
     * Helper function of removeAt.
     * @param n the head node of the array.
     * @param index the index of the array to be removed.
     * @return String type.
     */
    private String removeAt(Node n, int index) {
        if (index == 1 && n.next.next != null) {
            Node node = n;
            n.next = n.next.next;
            return node.next.data;
        } else if (n.next.next == null) {
            Node node = n;
            n.next = null;
            return node.data;
        } else {
            return removeAt(n.next, index - 1);
        }
    }
}
