/**
 * 08722 Data Structures for Application Programmers.
 *
 * Homework Assignment 4
 * HashTable Implementation with linear probing
 *
 * Andrew ID: xinw3
 * @author Xin Wang
 */
public class MyHashTable implements MyHTInterface {

    /**
     * Underlying data structure of MyHashTable.
     */
    private DataItem[] myTable;
    /**
     * Default capacity.
     */
    private static final int DEFAULT_CAPACITY = 10;
    /**
     * Default load factor.
     */
    private static final float DEFAULT_LOADFACTOR = 0.5f;
    /**
     * The maximum capacity can be setted.
     * Keep space to find the next prime number.
     */
    private static final int MAX_CAPACITY = Integer.MAX_VALUE - 8;
    /**
     * Flag to show that DataItem in this position has been deleted.
     */
    private static final DataItem DELETED = new DataItem("#DEL#", -1);
    /**
     * Polynomial constant in hashFunc.
     */
    private static final int N = 27;
    /**
     * Load factor.
     */
    private float loadFactor;
    /**
     * Record the size of the array.
     */
    private int size;
    /**
     * Record the number of collisions.
     */
    private int numOfCollisions = 0;
    /**
     * No-arg constructor.
     */
    public MyHashTable() {
        this(DEFAULT_CAPACITY);
    }
    /**
     * Constructor with initial capacity.
     * @param initialCapacity initial capacity.
     */
    public MyHashTable(int initialCapacity) {
        if (initialCapacity <= 0) {
            throw new RuntimeException("Illegal capacity!");
        }
        loadFactor = DEFAULT_LOADFACTOR;
        myTable = new DataItem[initialCapacity];
    }

    // Implementing methods from Interface.
    /**
     * Insert method.
     * @param value String to be inserted.
     */
    @Override
    public void insert(String value) {
        if (value != null && !value.trim().isEmpty()) {
            if (value.matches("[a-zA-Z]+")) {
                
                    rehash();
            
                String val = value.trim();
                int index = hashValue(val);
                // If the value doesn't exist.
                if ((myTable[index] == null) || myTable[index].equals(DELETED)) {
                    myTable[index] = new DataItem(val, 1);
                    size++;
                    rehash();
                    return;
                }
                // If value exists.
                if (contains(val)) {
                    for (int i = index; i < myTable.length; i++) {
                        if (myTable[i] != null && myTable[i].value.equals(val)) {
                            myTable[i].frequency++;
                            return;
                        }
                    }
                }
                if (!myTable[index].value.equals(val)
                         && index == hashValue(myTable[index].value)) {
                    numOfCollisions++;
                }
                for (int newIndex = index + 1; newIndex < myTable.length; newIndex++) {
                    if (myTable[newIndex] == null || myTable[newIndex].equals(DELETED)) {
                        myTable[newIndex] = new DataItem(val, 1);
                        size++;
                        return;
                    }
                }
            }
        }
    }
    /**
     * Returns the size, number of items, of the table.
     * @return int the number of items in the table
     */
    @Override
    public int size() {
        return size;
    }
    /**
     * Displays the values of the table.
     * If an index is empty, it shows **
     * If previously existed data item got deleted, then it should show #DEL#
     */
    @Override
    public void display() {
        for (int i = 0; i < myTable.length; i++) {
            if (myTable[i] == null) {
                System.out.print("** ");
            } else if (myTable[i].equals(DELETED)) {
                System.out.print("#DEL# ");
            } else {
                System.out.print("[" + myTable[i].value + ", " + myTable[i].frequency + "] ");
            }
        }
        System.out.println();
    }
    /**
     * Returns true if value is contained in the table.
     * @param key String key value to search
     * @return true if found, false if not found.
     */
    @Override
    public boolean contains(String key) {
        if (key.matches("[a-zA-Z]+")) {
            for (int i = 0; i < myTable.length; i++) {
                if (myTable[i] != null && myTable[i].value.equals(key)) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Returns the number of collisions in relation to insert and rehash.
     * When rehashing process happens, the number of collisions should be properly updated.
     *
     * The definition of collision is "two different keys map to the same hash value."
     * Be careful with the situation where you could overcount.
     * Try to think as if you are using separate chaining.
     * "How would you count the number of collisions?" when using separate chaining.
     * @return number of collisions
     */
    @Override
    public int numOfCollisions() {
        return numOfCollisions;
    }
    /**
     * Returns the hash value of a String.
     * @param value value for which the hash value should be calculated
     * @return int hash value of a String
     */
    @Override
    public int hashValue(String value) {
        return hashFunc(value);
    }
    /**
     * Returns the frequency of a key String.
     * @param key string value to find its frequency
     * @return frequency value if found. If not found, return 0
     */
    @Override
    public int showFrequency(String key) {
        if (key.matches("[a-z]+")) {
            int index = hashValue(key);
            for (int newIndex = index; newIndex <= myTable.length; newIndex++) {
                if (myTable[newIndex] != null && myTable[newIndex].value.equals(key)) {
                    return myTable[newIndex].frequency;
                }
            }
        }
        return 0;
    }
    /**
     * Removes and returns removed value.
     * @param key String to remove
     * @return value that is removed
     */
    @Override
    public String remove(String key) {
        if (contains(key)) {
            int index = hashValue(key);
            String val = myTable[index].value;
            myTable[index] = DELETED;
            size--;
            return val;
        }
        return null;
    }
    /**
     * Instead of using String's hashCode, you are to implement your own here.
     * You need to take the table length into your account in this method.
     *
     * In other words, you are to combine the following two steps into one step.
     * 1. converting Object into integer value
     * 2. compress into the table using modular hashing (division method)
     *
     * Helper method to hash a string for English lowercase alphabet and blank,
     * we have 27 total. But, you can assume that blank will not be added into
     * your table. Refer to the instructions for the definition of words.
     *
     * For example, "cats" : 3*27^3 + 1*27^2 + 20*27^1 + 19*27^0 = 60,337
     *
     * But, to make the hash process faster, Horner's method should be applied as follows;
     *
     * var4*n^4 + var3*n^3 + var2*n^2 + var1*n^1 + var0*n^0 can be rewritten as
     * (((var4*n + var3)*n + var2)*n + var1)*n + var0
     *
     * Note: You must use 27 for this homework.
     *
     * However, if you have time, I would encourage you to try with other
     * constant values than 27 and compare the results but it is not required.
     * @param input input string for which the hash value needs to be calculated
     * @return int hash value of the input string
     */
    private int hashFunc(String input) {
        int hashcode = 0;
        for (int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);
            //hashcode * 27 = hashcode * 32 - hashcode * 4 - hashcode;
            hashcode = (hashcode * N + (c - 0x60)) % myTable.length;
        }
        return hashcode;
    }

    /**
     * doubles array length and rehash items whenever the load factor is reached.
     */
    private void rehash() {
        if (size > myTable.length) {
            int oldCapacity = myTable.length;
            int rehashSize = 0;
            numOfCollisions = 0;
            DataItem[] oldTable = new DataItem[myTable.length];
            oldTable = myTable;
            int newCapacity = findPrime(oldCapacity << 1);
            if (newCapacity > MAX_CAPACITY) {
                newCapacity = findPrime(MAX_CAPACITY);
            }
            myTable = new DataItem[newCapacity];
            for (int i = 0; i < oldCapacity; i++) {
                if (oldTable[i] != null) {
                    String value = oldTable[i].value;
                    int freq = oldTable[i].frequency;
                    int index = hashValue(value);
                    //If position is available.
                    if (myTable[index] == null || myTable[index].equals(DELETED)) {
                        myTable[index] = new DataItem(value, freq);
                        rehashSize++;
                    } else {
                            if (contains(value)) {
                                rehashSize++;
                                for (int idx = index; idx < myTable.length; idx++) {
                                    if (myTable[idx] != null && myTable[idx].value.equals(value)) {
                                        myTable[idx].frequency++;
                                        break;
                                    }
                                }
                            } else {
                                if (!myTable[index].value.equals(value)
                                        && index == hashValue(myTable[index].value)) {
                                   numOfCollisions++;
                                }
                                for (int newIndex = index + 1; newIndex <= myTable.length; newIndex++) {
                                    if (myTable[newIndex] == null || myTable[index].equals(DELETED)) {
                                        myTable[newIndex] = new DataItem(value, freq);
                                        rehashSize++;
                                        break;
                                    }
                                }
                            }
                    }
                }
            }
            System.out.println("Rehashing " + rehashSize + " items, "
                                + "new size is " + newCapacity);
        }
    }

    /**
     * private static data item nested class.
     */
    private static class DataItem {
        /**
         * String value.
         */
        private String value;
        /**
         * String value's frequency.
         */
        private int frequency;
        /**
         * Constructor.
         * @param s String to be added as key.
         * @param f int the frequency of the key.
         */
        DataItem(String s, int f) {
            value = s;
            frequency = f;
        }
    }
    /**
     * Helper function to determine if the capacity is prime number.
     * If not, find the next prime number.
     * @param cap int capacity to be determined.
     * @return int the next prime number
     */
    private int findPrime(int cap) {
        //determine whether n is prime number.
        int prime = cap;
        boolean primeFlag = true;
        for (int i = 2; i < cap; i++) {
            if (cap % i == 0) {
                primeFlag = false;
                break;
            }
        }
        if (!primeFlag) {
            return findPrime(cap + 1);
        }
        return prime;
    }
}
